<?php

namespace backend\models;

use backend\behaviors\FileBehavior;
use backend\components\SiteHelper;
use common\components\MultilingualBehavior;
use common\models\Bean;
use common\models\Lang;
use common\modules\i18n\Module;
use frontend\components\FrontendHelper;
use Yii;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;
use yii\helpers\BaseFileHelper;
use yii\helpers\Url;
use yii\web\UploadedFile;

/**
 * This is the model class for table "category".
 *
 * @property integer $id
 * @property integer $created_at
 * @property integer $updated_at
 * @property integer $sort
 * @property integer $parent_id
 * @property integer $enabled
 * @property string $alias
 * @property string $image
 * @property integer $level
 *
 * @property Category $parent
 */
class Category extends Bean
{

    const STATUS_ENABLED = 1;

    const STATUS_DISABLED = 0;

    /**
     * @var UploadedFile
     */
    public $imageFile;

    /**
     * @var mixed
     */
    public $fileImage;

    /**
     * @var string
     */
    protected $tableLang = 'categorylang';

    /**
     * Init multilingual fields
     */
    public function init()
    {
        $this->multiLanguageFields = ['title'];
        parent::init(); // TODO: Change the autogenerated stub
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'category';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        $multiLanguageNames = $this->formMultiLanguageFields();
        $safe = $multiLanguageNames['title'];
        return [
            [['created_at', 'updated_at', 'sort', 'parent_id', 'enabled', 'level'], 'integer'],
            [['alias', 'image'], 'string'],
            [$safe, 'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id'         => Module::t('Id'),
            'created_at' => Module::t('Createdat'),
            'updated_at' => Module::t('Updatedat'),
            'sort'       => Module::t('Sort'),
            'parent_id'  => Module::t('Parent category'),
            'enabled'    => Module::t('Enabled'),
            'title'      => Module::t('Title'),
            'alias'      => Module::t('Alias'),
            'imageFile'  => Module::t('Image'),
        ];
    }

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
            'timestamp' => [
                'class' => TimestampBehavior::className(),
            ],
            'ml'        => [
                'class'           => MultilingualBehavior::className(),
                'defaultLanguage' => Lang::getDefaultLang()->url,
                'langForeignKey'  => 'category_id',
                'tableName'       => "{{%" . $this->tableLang . "}}",
                'attributes'      => $this->multiLanguageFields,
            ],
            'slug'      => [
                'class'        => 'common\\behaviors\\Alias',
                'inAttribute'  => 'title',
                'outAttribute' => 'alias',
            ],
            'file'      => [
                'class'          => FileBehavior::className(),
                'fileAttributes' => [
                    'image' => 'fileImage',
                ],
                'folderName'     => 'categories/images',
            ]
        ]);
    }

    /**
     * Method for getting the name of the bean
     * Is called for breadcrumb generation
     * @return array
     */
    public static function getLabels()
    {
        return [
            'singular' => 'Category',
            'multiple' => 'Categories'
        ];
    }

    /**
     * @return mixed
     */
    public function getCategoryTitle()
    {
        $fieldName = self::getMultiAttributeName('title', Lang::getCurrent()->url);
        return $this->{$fieldName};
    }

    /**
     * @param int $excludeID
     * @return array
     */
    public static function getCategoryDropdown($excludeID)
    {
        $collection = self::findAllWithTitle($excludeID);
        $tree = SiteHelper::buildTreeArrayFromCollection($collection, 'id');
        return SiteHelper::buildTreeDropdown($tree, 'id', 'title');
    }

    /**
     * @return array
     */
    public static function getCategoryTree()
    {
        $collection = self::findAllWithTitle(null);
        return SiteHelper::buildTreeArrayFromCollection($collection, 'id');
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getParent()
    {
        return $this->hasOne(self::className(), [
            'id' => 'parent_id'
        ])->localized(Lang::getCurrent()->url);
    }

    /**
     * Upload image file
     */
    public function afterValidate()
    {
        parent::afterValidate();
    }

    /**
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getParentItems()
    {
        return self::find()->where([
            'parent_id' => null,
            'enabled'   => self::STATUS_ENABLED,
        ])->orderBy('sort')->all();
    }

    /**
     * @return string
     */
    public function getViewLink()
    {
        return Url::to('product-category/' . $this->alias);
    }

    /**
     * @param $alias
     * @return array|null|\yii\db\ActiveRecord
     */
    public static function getCategoryByAlias($alias)
    {
        return self::find()->where([
            'alias' => $alias
        ])->localized(Lang::getCurrent()->url)->one();
    }

    /**
     * @param $categoryID
     * @return array|\yii\db\ActiveRecord[]
     */
    public static function getChildCategories($categoryID)
    {
        return self::find()->where([
            'parent_id' => $categoryID,
        ])->localized(Lang::getCurrent()->url)->orderBy('sort')->all();
    }

    /**
     * @return string
     */
    public function getUrl()
    {
        return FrontendHelper::formLink('/product-category/' . $this->alias);
    }

    /**
     * Get all parent categories
     * @return array
     */
    public function getParentCategories()
    {
        $parentID = $this->parent_id;
        if (!isset($parentID)) {
            return [];
        } else {
            $categories = [$this->parent];
            return ArrayHelper::merge($this->parent->getParentCategories(), $categories);
        }
    }

    /**
     * Save menu data by the given collection
     * @param array $collection
     * @param null|integer $parentID
     * @param integer $level
     */
    public static function saveTree($collection, $parentID = null, $level = 0)
    {
        foreach ($collection as $key => $item) {
            /**
             * @var Category $category
             */
            $category = self::findOne($item->id);
            $category->sort = $key;
            $category->parent_id = $parentID;
            $category->level = $level;
            $category->save();
            if (isset($item->children) && !empty($item->children)) {
                self::saveTree($item->children, $item->id, ++$level);
            }
        }
    }


}
